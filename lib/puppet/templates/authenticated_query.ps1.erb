$json = cat '<%= @sql_instance_config %>' | ConvertFrom-Json
$env:SQLCMDUSER = $json.admin
$env:SQLCMDPASSWORD = $json.pass
if($json.instance -ne 'MSSQLSERVER'){
$env:SQLCMDSERVER = "localhost\${json.instance}"
}
try {
if (!(Get-Command 'sqlcmd.exe' -ErrorAction SilentlyContinue)){
	if (Test-Path 'C:\Program Files\Microsoft SQL Server\120\Tools\Binn\sqlcmd.exe'){
    	$env:Path += ";C:\Program Files\Microsoft SQL Server\120\Tools\Binn\;"
	}elseif(Test-Path 'C:\Program Files\Microsoft SQL Server\110\Tools\Binn\sqlcmd.exe'){
    	$env:Path += ";C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;"
	}else{
   		$result = ls 'C:\Program Files\Microsoft SQL Server' -Filter sqlcmd.exe -Recurse | Select -First 1
		if ($result -eq $null) {
			Write-Error -Message "Unable to find the sqlcmd.exe" -Category ResourceUnavailable
		}else{
			$env:Path += ";{0}" -f $result.DirectoryName
		}
	}
	if (!(Get-Command 'sqlcmd.exe')){
	    Write-Error -Message "Unable to still find the sqlcmd.exe command" -Category ResourceUnavailable
	}
}

$result = sqlcmd.exe -i '<%= input_file %>' -h-1 -W -s ',' <% if @instance != 'MSSQLSERVER' %>-S localhost\<%= @instance %><%end%>
    if($result -match "THROW CAUGHT"){
    	Write-Host ($result | where {$_ -match "THROW CAUGHT"} | select -First 1)
        Write-Error -Message ($result | where {$_ -match "THROW CAUGHT"} | select -First 1)
		exit(10)
    }
	if($result -match "Incorrect syntax near "){
		Write-Host ($result | where {$_ -match "Incorrect syntax near"} | select -First 1)
	    Write-Error -Message ($result | where {$_ -match "Incorrect syntax"} | select -First 1)
		exit(10)
	}
	if($result -match "Msg \d+, Level 16"){
		$msg = $result -join ' '
		Write-Host $msg
		Write-Error -Message "ERROR: $msg"
		exit(10)
	}
}
catch{
	Write-Host $_
    exit(20)
}
exit(0)
