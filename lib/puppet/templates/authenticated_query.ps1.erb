$json = cat '<%= @sql_instance_config %>' | ConvertFrom-Json
$env:SQLCMDUSER = $json.admin
$env:SQLCMDPASSWORD = $json.pass
if($json.instance -ne 'MSSQLSERVER'){
$env:SQLCMDSERVER = "localhost\${json.instance}"
}
try {
  $sqlcmd = Get-Command 'sqlcmd.exe' -ErrorAction SilentlyContinue
  if ($sqlcmd -ne $null){
    $env:PATH += ";" + (Get-Item (Get-Command 'sqlcmd.exe').Path).Directory
  }
  else{
    @(120,110) | %{
      if (Test-Path "C:\Program Files\Microsoft SQL Server\$_\Tools\Binn\sqlcmd.exe"){
        $env:PATH += ";C:\Program Files\Microsoft SQL Server\$_\Tools\Binn"
      }
      elseif (Test-Path "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\$_\Tools\ClientSetup"){
        $k = gi "HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server\$_\Tools\ClientSetup"
        if ($k.GetValueNames().Contains("Path")){
          $env:PATH += ";" + $k.GetValue("Path")
        }
      }
    }
    if (!(Test-Path 'sqlcmd.exe')){
      $result = ls 'C:\Program Files\Microsoft SQL Server' -Filter sqlcmd.exe -Recurse | Select -First 1
	  if ($result -ne $null) {
	    $env:PATH += ";" + ($result.DirectoryName)
	  }
   }
 }
 $result = sqlcmd.exe -i '<%= input_file %>' -h-1 -W -s ',' <% if @instance != 'MSSQLSERVER' %>-S localhost\<%= @instance %><%end%>
  if($result -match "ERROR"){
    Write-Error -Message ($result | where {$_ -match "ERROR"} | select -First 1)
	exit(10)
  }
  if($result -match "Incorrect syntax near "){
    Write-Error -Message ($result | where {$_ -match "Incorrect syntax"} | select -First 1)
	exit(10)
  }
}
catch{
	Write-Host $_
    exit(20)
}
exit(0)
