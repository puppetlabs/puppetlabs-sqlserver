name: "PR Testing"

on: [pull_request]

jobs:
  setup_matrix:
    name: "Setup Test Matrix"
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.get-matrix.outputs.matrix }}

    steps:

    - name: Checkout Source
      uses: actions/checkout@v2
      if: ${{ github.repository_owner == 'puppetlabs' }}

    - name: Activate Ruby 2.7
      uses: ruby/setup-ruby@v1
      if: ${{ github.repository_owner == 'puppetlabs' }}
      with:
        ruby-version: "2.7"
        bundler-cache: true

    - name: Print bundle environment
      if: ${{ github.repository_owner == 'puppetlabs' }}
      run: |
        echo ::group::bundler environment
        bundle env
        echo ::endgroup::

    - name: Setup Acceptance Test Matrix
      id: get-matrix
      run: |
        bundle exec matrix_from_metadata_v2
        bundle exec matrix_from_metadata_v2

  Acceptance:
    name: "${{matrix.platforms.label}}, ${{matrix.collection}}"
    needs:
      - setup_matrix
    if: ${{ needs.setup_matrix.outputs.matrix != '{}' }}

    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJson(needs.setup_matrix.outputs.matrix)}}


    steps:

    - name: Checkout Source
      uses: actions/checkout@v2

    - name: Activate Ruby 2.7
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: "2.7"
        bundler-cache: true

    - name: Print bundle environment
      run: |
        echo ::group::bundler environment
        bundle env
        echo ::endgroup::

    - name: Provision test environment
      run: |
        bundle exec rake "litmus:provision[${{matrix.platforms.provider}},${{ matrix.platforms.image }}]"

    - name: Install agent
      run: |
        bundle exec rake 'litmus:install_agent[${{ matrix.collection }}]'

    - name: Install module
      run: |
        bundle exec rake 'litmus:install_module'

    - name: Authenitcate with GCP
      run: |
        echo '${{ secrets.GCP_CONNECTION }}' >> creds.json
        bundle exec bolt file upload creds.json C:\\creds.json --targets winrm_nodes --inventoryfile spec/fixtures/litmus_inventory.yaml
        bundle exec bolt command run "gcloud auth activate-service-account --key-file C:\\creds.json" --targets winrm_nodes --inventoryfile spec/fixtures/litmus_inventory.yaml

    - name: Download & Mount OS ISO
      run: |
        bundle exec bolt command run "gsutil -q cp gs://artifactory-modules/windows/en_windows_server_2019_updated_july_2020_x64_dvd_94453821.iso C:\\" --targets winrm_nodes --inventoryfile spec/fixtures/litmus_inventory.yaml
        bundle exec bolt command run '$isoImg = "C:\\en_windows_server_2019_updated_july_2020_x64_dvd_94453821.iso"
        $driveLetter = "I:"
        $diskImg = Mount-DiskImage -ImagePath $isoImg  -NoDriveLetter
        $volInfo = $diskImg | Get-Volume
        mountvol $driveLetter $volInfo.UniqueId' --targets winrm_nodes --inventoryfile spec/fixtures/litmus_inventory.yaml

    - name: Download & Mount SQLServer ISO
      run: |
        bundle exec bolt command run "gsutil -q cp gs://artifactory-modules/puppetlabs-sqlserver/SQLServer2019CTP2.4-x64-ENU.iso C:\\" --targets winrm_nodes --inventoryfile spec/fixtures/litmus_inventory.yaml
        bundle exec bolt command run '$isoImg = "C:\\SQLServer2019CTP2.4-x64-ENU.iso"
        $driveLetter = "H:"
        $diskImg = Mount-DiskImage -ImagePath $isoImg  -NoDriveLetter
        $volInfo = $diskImg | Get-Volume
        mountvol $driveLetter $volInfo.UniqueId' --targets winrm_nodes --inventoryfile spec/fixtures/litmus_inventory.yaml

    - name: Install SQL Server 
      run: |
        sudo apt-get install sshpass
        user=`grep -oP '(?<=user: ).*' spec/fixtures/litmus_inventory.yaml`
        pass=`grep -oP '(?<=password: ).*' spec/fixtures/litmus_inventory.yaml`
        uri=`grep -oP '(?<=uri: ).*' spec/fixtures/litmus_inventory.yaml`
        sshpass -p $pass ssh -o StrictHostKeyChecking=no $user@$uri "H://setup.exe /ACTION=install /Q /IACCEPTSQLSERVERLICENSETERMS /INSTANCENAME=MSSQLSERVER \
        /FEATURES=DQ,FullText,Replication,SQLEngine /UPDATEENABLED=False /SAPWD='Pupp3t1@' /SECURITYMODE=SQL /SQLSYSADMINACCOUNTS=$user"

    - name: Run acceptance tests
      run: |
        bundle exec rake 'litmus:acceptance:parallel'

    - name: Remove test environment
      if: ${{ always() }}
      continue-on-error: true
      run: |
        bundle exec rake 'litmus:tear_down'
