DECLARE
	@login as varchar(255) = '<%= @login %>',
	@is_disabled as tinyint = <%= @disabled ? 1 : 0 %>,
	@connect_sql_perm as char(1) = '<%= @disabled ? 'D' : 'G' %>',
	@check_expiration as tinyint = <%= @check_expiration ? 1 : 0 %>,
	@check_policy as tinyint = <%= @check_policy ? 1 : 0 %>,
	@type_desc as varchar(50) = '<%= @login_type %>',
	@default_db as varchar(255) = '<%= @default_database %>',
	@default_lang as varchar(50) = '<%= @default_language %>',
	@principal_type as varchar(255) = NULL;

IF <% if @ensure == 'present' %>NOT<% end %> EXISTS(SELECT name FROM sys.server_principals WHERE name = '<%= @login %>')
    THROW 51000, 'ERROR: The login is not <%= @ensure %>', 10

<% if @ensure == 'present' %>
BEGIN
/* Check if account exists in the correct state */
SET @principal_type = (SELECT p.[type] FROM sys.server_principals p
	LEFT JOIN sys.sql_logins s ON s.name = p.name
	WHERE
	p.name = @login
	AND p.default_database_name = @default_db
	AND p.default_language_name = @default_lang
	-- Only check disabled status if it's not a WINDOWS_GROUP
	AND (p.type_desc = 'WINDOWS_GROUP' OR p.is_disabled = @is_disabled)
	<% if @login_type == 'SQL_LOGIN' %>
		AND s.is_policy_checked = @check_policy
		AND s.is_expiration_checked = @check_expiration
	<% end %>
	<% if @login_type == 'WINDOWS_LOGIN' %>
		AND ((p.type_desc = 'WINDOWS_LOGIN') OR (p.type_desc = 'WINDOWS_GROUP'))
	<% else %>
		AND p.type_desc = @type_desc
	<% end %>
	)
IF (@principal_type IS NULL) THROW 51000, 'ERROR: The login is not in the correct state', 10

<% if @login_type == 'WINDOWS_LOGIN' %>
/* Look for the CONNECT SQL server permission on the WINDOWS_GROUP */
IF (@principal_type = 'G')
BEGIN
  IF NOT EXISTS(SELECT sp.[state] FROM sys.server_principals p
		INNER JOIN sys.server_permissions sp ON p.principal_id = sp.grantee_principal_id
		WHERE
		sp.permission_name = 'CONNECT SQL'
		AND sp.class = 100
		AND p.name = @login
		AND sp.state = @connect_sql_perm
	) THROW 51000, 'ERROR: The group login is not in the correct state', 10
END
<% end %>

/* If it does exist check for each role is in the correct state */
<% @svrroles.each do |role, enable_bit| %>
		IF (SELECT COUNT(me.role_principal_id) from sys.server_role_members me
			JOIN sys.server_principals rol ON me.role_principal_id = rol.principal_id
			JOIN sys.server_principals pri ON me.member_principal_id = pri.principal_id
			WHERE rol.type_desc = 'SERVER_ROLE'
				AND rol.name = '<%= role %>'
				AND pri.name = '<%= @login %>') != <%= enable_bit %>
			THROW 51000, 'ERROR: a role is not correct for <%= role %>', 10
<% end %>

END
<% end %>

